version: '3.9'
services:
  zookeeper:
    container_name: ${ZOOKEEPER_SERVICE_NAME}
    image: ${ZOOKEEPER_IMAGE}
    restart: always
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    container_name: ${KAFKA_SERVICE_NAME}
    image: ${KAFKA_IMAGE}
    restart: always
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    hostname: 'kafka'
    environment:
      - KAFKA_ADVERTISED_HOST_NAME = kafka
      - KAFKA_ADVERTISED_LISTENERS = PLAINTEXT://:9092
      #- PLAINTEXT_HOST://localhost:9092
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      #- KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-internal:${KAFKA_PORT}
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CREATE_TOPICS = "patika-test"
    depends_on:
      - zookeeper
    #expose:
    #  - "9093"
    links:
      - zookeeper:zookeeper
    networks:
      - app-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    container_name: ${PG_SERVICE_NAME}
    image: ${PG_IMAGE}
    restart: always
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
    volumes:
      - ./data/pgsql:/var/lib/postgresql/data
      #- pgdata:/var/lib/postgresql/data
      - ./data/init.sql:/docker-entrypoint-initdb.d/initialize.sql
    ports:
      - ${PG_PORT}:${PG_PORT}
    networks:
      - app-network

  pgadmin4:
    container_name: ${PG_ADMIN_SERVICE_NAME}
    image: ${PG_ADMIN_IMAGE}
    ports:
      - ${PG_ADMIN_PORT}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASS}
    volumes:
      # sets up a default server in the pgadmin interface
      - ./servers.json:/pgadmin4/${PG_ADMIN_DEFAULT_SERVER_PATH}
    networks:
      - app-network

  redis:
    container_name: ${REDIS_SERVICE_NAME}
    image: ${REDIS_IMAGE}
    restart: always
    #command: >
    #      --requirepass ${REDIS_PASS}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
      #environment:
      # - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    networks:
      - app-network

  redisinsight:
    container_name: ${REDIS_MANAGE_SERVICE_NAME}
    image: ${REDIS_MANAGE_IMAGE}
    restart: always
    ports:
      - ${REDIS_MANAGE_PORT}:${REDIS_MANAGE_PORT}
    volumes:
      # sets up a default server in the pgadmin interface
      - ./data/redisinsight:/db
    networks:
      - app-network

  web:
    container_name: ${COMPOSE_PROJECT_NAME}
    build: ../
    ports:
      - 3000:3000
    environment:
      # Environment vars used for pg node module
      PGHOST: ${PG_HOST}
      PGPORT: ${PG_PORT}
      PGUSER: ${PG_USER}
      PGPASSWORD: ${PG_PASS}
      PGDATABASE: ${PG_DATABASE}
    depends_on:
      - kafka
      - postgres
    links:
      - kafka:kafka
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    networks:
      - app-network
      -
networks:
  app-network:
    driver: bridge

volumes:
  node_modules:
  pgdata:
